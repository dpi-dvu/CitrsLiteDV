@inject NavigationManager NavigationManager
@inject CitrsLite.Business.Services.ParticipantService participantService
@using CitrsLite.Business.ViewModels.ParticipantViewModels;
@using CitrsLite.Data.Models
@using CitrsLite.Business.Enums

<MudTable Class="mt-3" Items="@Participants" Dense="true" FixedHeader="true" FixedFooter="true"
          Filter= "new Func<Participant,bool>(FilterFunc1)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Participant List</MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>City</MudTh>
        <MudTh>Details</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            <MudHighlighter Text="@context.Name" HighlightedText="@searchQuery?.Name" />
        </MudTd>
        <MudTd DataLabel="Type">@context.Type</MudTd>
        <MudTd DataLabel="City">@context.City</MudTd>
        <MudTd DataLabel="Details">
            <MudButton Href=@("/participant/detail/" + context.Id.ToString())
                       Variant="Variant.Text"
                       EndIcon="@Icons.Material.Filled.Link"
                       Color="Color.Primary">
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<Participant> Participants = new List<Participant>();
    [Parameter]
    public ParticipantDetailViewModel? searchQuery { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Participants = await participantService.GetListAsync();
    }

    private bool FilterFunc1(Participant participant) => SearchParticipant(participant, searchQuery);

    private bool SearchParticipant(Participant participant, ParticipantDetailViewModel searchQuery)
    {
        if (searchQuery.Name == null || 
            participant.Name.Contains(searchQuery.Name, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
